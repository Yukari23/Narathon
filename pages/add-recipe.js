import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import styles from '../styles/AddRecipe.module.css';
import { FaUpload, FaPlus, FaTimes, FaUtensils } from 'react-icons/fa';
import { MdRestaurant, MdWbSunny, MdNightsStay } from 'react-icons/md';

export default function AddRecipe() {
  const router = useRouter();

  const [recipeData, setRecipeData] = useState({
    title: '',
    description: '',
    imagePreview: null,
    imageFile: null,
    ingredients: [''],
    steps: [''],
    selectedDiseases: [],
    selectedMeals: [],
    cookTime: '',
    calories: '',
    member_email: '',
    admin: ''
  });

  const [diseases, setDiseases] = useState([]);
  const [newDiseaseName, setNewDiseaseName] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitSuccess, setSubmitSuccess] = useState(false);

  const diseasePalette = [
    '#FFB6C1', '#ADD8E6', '#FFD700', '#98FB98', '#DDA0DD',
    '#F0E68C', '#CDE7FF', '#FECACA', '#DCFCE7', '#E9D5FF'
  ];
  const getDiseaseColor = (id) => diseasePalette[(Number(id) || 0) % diseasePalette.length];

  useEffect(() => {
    const loadDiseases = async () => {
      try {
        const res = await fetch('/api/diseases');
        const data = await res.json();
        if (res.ok) setDiseases(data.diseases || []);
      } catch (err) {
        console.error('‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
      }
    };
    loadDiseases();
  }, []);

  const mealTypes = [
    { id: 'breakfast', name: '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡πâ‡∏≤', icon: <MdWbSunny />, color: '#FEF08A' },
    { id: 'lunch', name: '‡∏°‡∏∑‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏ß‡∏±‡∏ô', icon: <MdRestaurant />, color: '#BBF7D0' },
    { id: 'dinner', name: '‡∏°‡∏∑‡πâ‡∏≠‡πÄ‡∏¢‡πá‡∏ô', icon: <MdNightsStay />, color: '#DDD6FE' }
  ];

  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      if (file.size > 10 * 1024 * 1024) {
        alert('‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ç‡∏ô‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏ô 10MB');
        return;
      }
      const reader = new FileReader();
      reader.onloadend = () => {
        setRecipeData({
          ...recipeData,
          imagePreview: reader.result,
          imageFile: file
        });
      };
      reader.readAsDataURL(file);
    }
  };

  const handleIngredientChange = (index, value) => {
    const newIngredients = [...recipeData.ingredients];
    newIngredients[index] = value;
    setRecipeData({ ...recipeData, ingredients: newIngredients });
  };

  const handleStepChange = (index, value) => {
    const newSteps = [...recipeData.steps];
    newSteps[index] = value;
    setRecipeData({ ...recipeData, steps: newSteps });
  };

  const addIngredient = () => {
    setRecipeData({
      ...recipeData,
      ingredients: [...recipeData.ingredients, '']
    });
  };

  const addStep = () => {
    setRecipeData({
      ...recipeData,
      steps: [...recipeData.steps, '']
    });
  };

  const removeIngredient = (index) => {
    const newIngredients = recipeData.ingredients.filter((_, i) => i !== index);
    setRecipeData({ ...recipeData, ingredients: newIngredients });
  };

  const removeStep = (index) => {
    const newSteps = recipeData.steps.filter((_, i) => i !== index);
    setRecipeData({ ...recipeData, steps: newSteps });
  };

  const toggleDisease = (diseaseId) => {
    setRecipeData(prev => {
      const isSelected = prev.selectedDiseases.includes(diseaseId);
      if (isSelected) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        return {
          ...prev,
          selectedDiseases: prev.selectedDiseases.filter(id => id !== diseaseId)
        };
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        return {
          ...prev,
          selectedDiseases: [...prev.selectedDiseases, diseaseId]
        };
      }
    });
  };

  const selectMeal = (mealId) => {
    console.log('selectMeal called with:', mealId);
    console.log('Current selectedMeals:', recipeData.selectedMeals);
    
    setRecipeData(prev => {
      const isSelected = prev.selectedMeals.includes(mealId);
      console.log('Is meal selected:', isSelected);
      
      if (isSelected) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        const newSelectedMeals = prev.selectedMeals.filter(id => id !== mealId);
        console.log('Removing meal, new selectedMeals:', newSelectedMeals);
        return {
          ...prev,
          selectedMeals: newSelectedMeals
        };
      } else {
        // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ
        const newSelectedMeals = [...prev.selectedMeals, mealId];
        console.log('Adding meal, new selectedMeals:', newSelectedMeals);
        return {
          ...prev,
          selectedMeals: newSelectedMeals
        };
      }
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitSuccess(false);

    const formData = new FormData();
    formData.append('Recipe_name', recipeData.title);
    formData.append('details', recipeData.description);
    
    // ‡∏™‡πà‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡∏°‡∏∑‡πâ‡∏≠ (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)
    const mealsString = recipeData.selectedMeals.join(',');
    formData.append('Meal', mealsString);
    
    formData.append('method', JSON.stringify(recipeData.steps));
    formData.append('raw_material', JSON.stringify(recipeData.ingredients));

    // ‡∏™‡πà‡∏á‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≤‡∏¢‡πÇ‡∏£‡∏Ñ
    const selectedDiseaseIds = recipeData.selectedDiseases;
    const selectedDiseases = diseases.filter(d => selectedDiseaseIds.includes(d.id));
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Disease_tags ‡∏à‡∏≤‡∏Å‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏à‡∏∏‡∏•‡∏†‡∏≤‡∏Ñ)
    const diseaseTagsString = selectedDiseases.map(d => d.name).join(',');
    formData.append('Disease_tags', diseaseTagsString);
    
    // ‡∏™‡πà‡∏á Disease_code ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
    formData.append('Disease_code', selectedDiseaseIds[0] || '');

    if (recipeData.imageFile) formData.append('Image', recipeData.imageFile);

    try {
      const response = await fetch('/api/add-recipe', {
        method: 'POST',
        body: formData
      });

      const text = await response.text();
      let data;
      try {
        data = JSON.parse(text);
      } catch {
        throw new Error(`Invalid JSON response: ${text}`);
      }

      if (response.ok) {
        setSubmitSuccess(true);
        // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°
        setRecipeData({
          title: '',
          description: '',
          imagePreview: null,
          imageFile: null,
          ingredients: [''],
          steps: [''],
          selectedDiseases: [],
          selectedMeals: [],
          cookTime: '',
          calories: '',
          member_email: '',
          admin: ''
        });
        // ‡∏ã‡πà‡∏≠‡∏ô success message ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => setSubmitSuccess(false), 3000);
      } else {
        const detail = data && (data.error || data.sqlMessage || data.code);
        alert(`${data?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£'}${detail ? `\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${detail}` : ''}`);
      }
    } catch (error) {
      console.error('Error submitting recipe:', error);
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className={styles.pageWrapper}>
      <div className={styles.container}>
        <div className={styles.topBar}>
          <button type="button" className={styles.backButton} onClick={() => router.back()}>
            <span>‚Üê</span> ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
          </button>

          <h1 className={styles.title}>‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</h1>

          {/* ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á */}
          <div className={styles.topBarRight} aria-hidden="true" />
        </div>


        <form onSubmit={handleSubmit} className={styles.form}>
          {/* ‡∏™‡πà‡∏ß‡∏ô‡∏ã‡πâ‡∏≤‡∏¢ - ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
          <div className={styles.formLeft}>
            {/* üì∏ ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û */}
            <div className={styles.imageUpload}>
              {recipeData.imagePreview ? (
                <div className={styles.previewContainer}>
                  <img src={recipeData.imagePreview} alt="Preview" className={styles.preview} />
                  <button
                    type="button"
                    onClick={() => setRecipeData({ ...recipeData, imagePreview: null, imageFile: null })}
                    className={styles.removeImage}
                  >
                    <FaTimes />
                  </button>
                </div>
              ) : (
                <label className={styles.uploadLabel}>
                  <FaUpload />
                  <span>‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</span>
                  <input type="file" accept="image/*" onChange={handleImageChange} hidden />
                </label>
              )}
            </div>

            {/* üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô */}
            <div className={styles.formGroup}>
              <label>‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π</label>
              <input
                type="text"
                value={recipeData.title}
                onChange={(e) => setRecipeData({ ...recipeData, title: e.target.value })}
                placeholder="‡πÉ‡∏™‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏≤‡∏´‡∏≤‡∏£"
                required
              />
            </div>

            <div className={styles.formGroup}>
              <label>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢</label>
              <textarea
                value={recipeData.description}
                onChange={(e) => setRecipeData({ ...recipeData, description: e.target.value })}
                placeholder="‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ô‡∏µ‡πâ"
              />
            </div>

            {/* üçΩÔ∏è ‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£ */}
            <div className={styles.formGroup}>
              <label>‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£</label>
              <div className={styles.tagGrid}>
                {mealTypes.map((meal) => (
                  <button
                    key={meal.id}
                    type="button"
                    className={`${styles.tagButton} ${recipeData.selectedMeals.includes(meal.id) ? styles.tagSelected : ''
                      }`}
                    style={{
                      backgroundColor: recipeData.selectedMeals.includes(meal.id)
                        ? meal.color
                        : 'transparent',
                      borderColor: meal.color
                    }}
                    onClick={() => {
                      console.log('Meal button clicked:', meal.id);
                      console.log('Current selectedMeals:', recipeData.selectedMeals);
                      console.log('All mealTypes:', mealTypes);
                      selectMeal(meal.id);
                    }}
                  >
                    {meal.icon} {meal.name}
                  </button>
                ))}
              </div>
            </div>
          </div>

          {/* ‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏ß‡∏≤ - ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥ ‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡πá‡∏Å */}
          <div className={styles.formRight}>
            {/* ü•£ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö */}
            <div className={styles.formGroup}>
              <label>‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡∏¥‡∏ö</label>
              {recipeData.ingredients.map((ingredient, index) => (
                <div key={index} className={styles.listItem}>
                  <input
                    type="text"
                    value={ingredient}
                    onChange={(e) => handleIngredientChange(index, e.target.value)}
                    placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• 2 ‡∏ä‡πâ‡∏≠‡∏ô‡πÇ‡∏ï‡πä‡∏∞"
                  />
                  {recipeData.ingredients.length > 1 && (
                    <button type="button" onClick={() => removeIngredient(index)} className={styles.removeButton}>
                      <FaTimes />
                    </button>
                  )}
                </div>
              ))}
              <button type="button" onClick={addIngredient} className={styles.addButton}>
                <FaPlus /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡πà‡∏ß‡∏ô‡∏ú‡∏™‡∏°
              </button>
            </div>

            {/* üç≥ ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥ */}
            <div className={styles.formGroup}>
              <label>‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏≥</label>
              {recipeData.steps.map((step, index) => (
                <div key={index} className={styles.listItem}>
                  <textarea
                    value={step}
                    onChange={(e) => handleStepChange(index, e.target.value)}
                    placeholder={`‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${index + 1}`}
                  />
                  {recipeData.steps.length > 1 && (
                    <button type="button" onClick={() => removeStep(index)} className={styles.removeButton}>
                      <FaTimes />
                    </button>
                  )}
                </div>
              ))}
              <button type="button" onClick={addStep} className={styles.addButton}>
                <FaPlus /> ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô
              </button>
            </div>

            {/* üè∑Ô∏è ‡πÅ‡∏ó‡πá‡∏Å‡πÇ‡∏£‡∏Ñ */}
            <div className={styles.formGroup}>
              <label>‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢</label>
              <div className={styles.tagGrid}>
                {diseases.map((disease) => (
                  <button
                    key={disease.id}
                    type="button"
                    className={`${styles.tagButton} ${recipeData.selectedDiseases.includes(disease.id) ? styles.tagSelected : ''
                      }`}
                    style={{
                      backgroundColor: recipeData.selectedDiseases.includes(disease.id)
                        ? getDiseaseColor(disease.id)
                        : 'transparent',
                      borderColor: getDiseaseColor(disease.id)
                    }}
                    onClick={() => toggleDisease(disease.id)}
                  >
                    {disease.name}
                  </button>
                ))}
              </div>

              <div style={{ display: 'flex', gap: 8, marginTop: 8 }}>
                <input
                  type="text"
                  value={newDiseaseName}
                  onChange={(e) => setNewDiseaseName(e.target.value)}
                  placeholder="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏Å‡πÇ‡∏£‡∏Ñ‡πÉ‡∏´‡∏°‡πà"
                />
                <button
                  type="button"
                  onClick={async () => {
                    const name = newDiseaseName.trim();
                    if (!name) return;
                    try {
                      const res = await fetch('/api/diseases', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ name })
                      });
                      const data = await res.json();
                      if (res.ok) {
                        setDiseases((prev) => [...prev, { id: data.id, name: data.name }]);
                        setNewDiseaseName('');
                      } else {
                        alert(data.message || '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏Å‡πÇ‡∏£‡∏Ñ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
                      }
                    } catch {
                      alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏Å‡πÇ‡∏£‡∏Ñ‡πÑ‡∏î‡πâ');
                    }
                  }}
                  className={styles.addButton}
                >
                  ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ó‡πá‡∏Å‡πÇ‡∏£‡∏Ñ
                </button>
              </div>
            </div>
          </div>

          <button 
            type="submit" 
            className={styles.submitButton}
            disabled={isSubmitting}
          >
            {isSubmitting ? (
              <>‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...</>
            ) : (
              <><FaUtensils /> ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£</>
            )}
          </button>
          
          {submitSuccess && (
            <div className={styles.successMessage}>
              ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏π‡∏ï‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß! ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
            </div>
          )}
        </form>
      </div>
    </div>
  );
}
